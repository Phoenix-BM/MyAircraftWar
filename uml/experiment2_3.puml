@startuml
'https://plantuml.com/class-diagram

class EnemyFactoryDemo
{
    ~ enemyFactory:EnemyFactory
    ~ abstractEnemy:AbstractEnemy
    - enemyType:int
    + createEnemyDemo(List<AbstractEnemy> enemyAircrafts): void
}

abstract class AbstractEnemy
{
    # hp:int
    # score:int
    + AbstractEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getScore():int
    + {abstract} shoot():List<BaseBullet>
    + {abstract} propDrop(List<BaseProp> props, AbstractEnemy eliteEnemy):List<BaseProp>
}

interface EnemyFactory
{
    + {abstract} createEnemy(): AbstractEnemy
}

AbstractEnemy <.. EnemyFactoryDemo
EnemyFactory <.. EnemyFactoryDemo

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + forward():void
    + shoot():List<BaseBullet>
    + propDrop(List<BaseProp> props, AbstractEnemy eliteEnemy):List<BaseProp>
}

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + forward():void
    + shoot():List<BaseBullet>
    + propDrop(List<BaseProp> props, AbstractEnemy eliteEnemy):List<BaseProp>
}

class MobEnemyFactory
{
    - locationX: int
    - locationY：int
    - speedX: int
    - speedY: int
    - hp: int
    - score: int
    + createEnemy():AbstractEnemy
    + getLocationX(): int
    + getLocationY(): int
    + getSpeedX(): int
    + getSpeedY(): int
    + getHp(): int
}

class EliteEnemyFactory
{
     - locationX: int
     - locationY：int
     - speedX: int
     - speedY: int
     - hp: int
     - score: int
     + createEnemy():AbstractEnemy
     + getLocationX(): int
     + getLocationY(): int
     + getSpeedX(): int
     + getSpeedY(): int
     + getHp(): int
}

EnemyFactory <|.. MobEnemyFactory
EnemyFactory <|.. EliteEnemyFactory

AbstractEnemy <|-- MobEnemy
AbstractEnemy <|-- EliteEnemy

MobEnemy <.. MobEnemyFactory
EliteEnemy <.. EliteEnemyFactory

@enduml