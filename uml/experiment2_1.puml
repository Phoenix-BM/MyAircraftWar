@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedX():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # score:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + increaseHp(int increase):void
    + getHp():int
    + getScore():int
    + {abstract} shoot():List<BaseBullet>
 }

abstract class AbstractEnemy
{
    # hp:int
    # score:int
    + AbstractEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getScore():int
    + {abstract} shoot():List<BaseBullet>
    + {abstract} propDrop(List<BaseProp> props, AbstractEnemy eliteEnemy):List<BaseProp>
}
AbstractAircraft <|-- AbstractEnemy

class HeroAircraft {
    - {static} instance:HeroAircraft
    - shootNum:int
    - power:int
    - direction:int
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + {static} getInstance():HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + forward():void
    + shoot():List<BaseBullet>
    + propDrop(List<BaseProp> props, AbstractEnemy eliteEnemy):List<BaseProp>
}
AbstractEnemy <|-- MobEnemy

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + forward():void
    + shoot():List<BaseBullet>
    + propDrop(List<BaseProp> props, AbstractEnemy eliteEnemy):List<BaseProp>
}
AbstractEnemy <|-- EliteEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

abstract class BaseProp {
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + {abstract} effect():void
}

class PropBlood {
    - hp:int
    + PropBlood(int locationX, int locationY,
      int speedX, int speedY, int hp)
    + getHp():int
    + effect():void
}

class PropBomb {
    + PropBomb(int locationX, int locationY,
      int speedX, int speedY)
    + effect():void
}

class PropBullet {
    + PropBullet(int locationX, int locationY,
      int speedX, int speedY)
    + effect():void
}

BaseProp <|-- PropBlood
BaseProp <|-- PropBomb
BaseProp <|-- PropBullet

AbstractFlyingObject <|-- BaseProp

@enduml